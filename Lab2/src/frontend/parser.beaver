// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// A module consists of the keyword module,
// followed by an identifier (which is the module’s name),
// followed by an opening curly brace,
// followed by imports,
// followed by declarations,
// followed by a closing curly brace.
Module = MODULE ID LCURLY Imports Declarations RCURLY;

// A module’s imports (nonterminal Imports) specify what other modules this module will import.
// They consist of zero or more import statements.

// An import statement (nonterminal Import) consists of
// the keyword import,
// followed by an identifier,
// followed by a semicolon.
// The identifier is the name of a module to be imported.

// A module’s declarations (nonterminal Declarations) consist of zero or more declarations.
// A declaration is either a function declaration, or a field declaration, or a type declaration.

// A function declaration consists of an accessibility specifier, a type name, an identifier, an opening parenthesis,
// a parameter list, a closing parenthesis, an opening curly brace, a possibly empty list of statements, and a closing
// curly brace.

// A field declaration consists of an accessibility specifier, a type name, an identifier, and a semicolon.

// A type declaration consists of an accessibility specifier, the keyword type, an identifier,
// a single equals symbol, a string literal, and a semicolon.

// An accessibility specifier consists of either the keyword public, or of nothing at all.

// A type name is either a primitive type, an array type, or an identifier.

// A primitive type is one of the keywords void, boolean and int.

// An array type is a type name, followed by a left bracket, followed by a right bracket.

// A parameter list is a possibly empty list of parameters separated by commas.
// A parameter is a type name followed by an identifier.

// A statement is one of the following.

// A local variable declaration consists of a type name,
// followed by an identifier,
// followed by a semicolon.

// A block of statements consists of an opening curly brace,
// followed by a possibly empty list of statements,
// followed by a closing curly brace.

// An if statement consists of an if keyword, an opening parenthesis, an expression,
// a closing parenthesis, a statement, an else keyword, and another statement;
// optionally, the else keyword and the last statement may be missing.

// A while statement consists of a while keyword, an opening parenthesis, an expression,
// a closing parenthesis, and a statement.

// A break statement consists of a break keyword followed by a semicolon.

// A return statement consists of a return keyword, followed by an optional expression,
// followed by a semicolon.

// An expression statement consists of an expression followed by a semicolon.

// An expression is either an assignment or a right hand side expression.

// An assignment is a left hand side expression, followed by a single equals sign, followed by an expression.

// A left hand side expression is either an identifier or an array access.

// An array access is a left hand side expression, followed by an opening bracket,
// followed by an expression, followed by a closing bracket.

// A right hand side expression is an arithmetic expression,
// optionally followed by a comparison operator and another arithmetic expression.

// A comparison operator is one of EQEQ, NEQ, LT, LEQ, GT, GEQ.

// An arithmetic expression is either an arithmetic expression, followed by an additive operator,
// followed by a term; or just a term.

// An additive operator is either PLUS or MINUS.

// A term is either a term, followed by a multiplicative operator, followed by a factor; or just a factor.
// A multiplicative operator is one of TIMES, DIV, MOD.

// A factor is either a MINUS followed by a factor, or a primary expression.

// A primary expression is one of the following.

// A function call is an identifier, followed by an opening parenthesis, followed by a possibly empty list of
// expressions separated by comma, followed by a closing parenthesis.

// An array expression is an opening bracket, followed by a non-empty list of expressions separated by comma,
// followed by a closing bracket.

// A parenthesised expression is an opening parenthesis, followed by an expression, followed by a closing parenthesis.

/**/